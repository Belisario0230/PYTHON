# -*- coding: utf-8 -*-
"""Tema09.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ty5nR5ns3todBj_t4Y8kcv-e0rW2AxlW

# Estructuras de datos: Tuplas

## Tupla

La última estructura que veremos son las tuplas. Éstas son un conjunto de elementos, que pueden ser de distintos tipos, separados por comas y escritos entre paréntesis, `()`.

Las tuplas son:
- hetereogéneas: los elementos pueden ser de distinto tipo en una misma tupla
- no mutables: los elementos no pueden ser modifcados una vez la tupla ha sido creado

Un ejemplo de tupla sería
"""

t = ("Juan", 32, "profesor", True)
print(t)

"""Podemos declarar una tupla sin necesidad indicar sus elementos entre paréntesis"""

t = "Juan", 32, "profesor", True
type(t)

"""Podemos declarar tuplas con la función `tuple()`"""

t = tuple(("Juan", 32, "profesor", True))
type(t)

tuple([1,2,3])

"""### Elementos de una tupla

Podemos acceder a los elementos de una tupla mediante el índice que ocupan con la sintaxis de claudator, `[]`
"""

t = 1, "a", 2, "e", 3, "i", 4, "o", 5, "u"
print(t[0])
print(t[5])

"""Al igual que con las listas, podemos acceder a los elementos de tuplas mediante el uso de índices negativos"""

print(t[-1])
print(t[-4])

"""Para acceder a múltiples entradas de una tupla a la vez, podemos utilizar la función `:` para indicar un intervalo de índices."""

print(t[2:6])
print(t[:5])
print(t[5:])

"""**Observación.** Recordad que
- el índice indicado tras los dos puntos, `:`, nunca es incluido.
- si no se indica índice a la izquierda de `:`, se considera desde el índice 0 hasta el inmediatamente anterior al indicado a la derecha de `:`
- si no se indica índice a la derecha de `:`, se considera desde el índice indicado a la izquierda de `:` hasta el último elemento

También podemos usar índices negativos con la función `:`
"""

print(t[-5:-1])

"""Para saber si un elemento pertenece a una tupla, podemos usar la palabra clave `in`"""

print(6 in t)
print("i" in t)

"""Hemos dicho que las tuplas son inmutables. Esto es, una vez creada la tupla, sus elementos no pueden ser modificados"""

t = "Cereza", "Manzana", "Pera"
t[1] = "Kiwi"

"""Una alternativa sería convertir a lista, realizar la modificación y reconvertir a tupla"""

t = "Cereza", "Manzana", "Pera"
t = list(t)
t[1] = "Kiwi"
t = tuple(t)

print(t)
print(type(t))

"""## El método de unpacking

Podemos extraer los valores de una tupla en variables. Este proceso es conocido como **unpacking**
"""

fruits = "Cereza", "Kiwi", "Pera", "Naranja"
print(type(fruits))

# Con paréntesis
(fruit1, fruit2, fruit3, fruit4) = fruits

print(fruit1)
print(fruit2)
print(fruit3)
print(fruit4)

"""Funciona igual si no declaramos las variables entre paréntesis."""

fruits = "Cereza", "Kiwi", "Pera", "Naranja"
print(type(fruits))

# Sin paréntesis
fruit1, fruit2, fruit3, fruit4 = fruits

print(fruit1)
print(fruit2)
print(fruit3)
print(fruit4)

"""**¡Cuidado!** El número de variables debe coincidir con el número de elementos de la tupla. De lo contrario, debe usarse un asterisco para guardar los elementos restantes en una lista."""

fruits = "Cereza", "Kiwi", "Pera", "Naranja"

(fruit1, fruit2, *restFruits) = fruits

print(fruit1)
print(fruit2)
print(restFruits)
print(type(restFruits))

"""**Observación.** Si el asterisco es añadido en alguna variable que no sea la última, `Python` almacenará tantos elementos en la lista como sea necesario para que el número de elementos restantes coincida con el número de variables restantes."""

fruits = "Cereza", "Kiwi", "Pera", "Naranja", "Melocotón", "Sandía", "Melón"

(fruit1, *restFruits, fruit2, fruit3) = fruits

print(fruit1)
print(restFruits)
print(fruit2)
print(fruit3)

punto = (1, 2, 3)
x, _, z = punto
print(x + z)

fruits = "Cereza", "Kiwi", "Pera", "Naranja", "Melocotón", "Sandía", "Melón"

(fruit1, *_, fruit2, fruit3) = fruits

print(fruit1)
print(fruit2)
print(fruit3)

"""## Concatenación de tuplas

Podemos concatenar tuplas con la función `+`, aunque el resultado será una nueva tupla, ya que recordemos éstas no pueden ser modificadas
"""

t1 = 1, 3
t2 = 2, 4

t1 + t2

"""## Repetición de tuplas

Podemos repetir tuplas un número $n$ de veces con la función `*`
"""

t = ("a", "b", "c")
t * 5

"""## Tamaño de una tupla

Podemos calcular el número de elementos de una tupla con la función `len()`
"""

t = "Juan", 32, "profesor", True
len(t)

"""**¡Cuidado!** Si quisiésemos crear una tupla de un solo elemento, tendríamos que hacer lo siguiente"""

t1 = ("manzana", )
print(type(t1))

# Lo siguiente no es una tupla
t2 = ("manzana")
print(type(t2))

"""## Bucles y tuplas

Podemos iterar una tupla utilizando un bucle `for`


"""

fruits = "Cereza", "Kiwi", "Pera", "Naranja", "Melocotón", "Sandía", "Melón"

for fruit in fruits:
  print(fruit)

"""También podemos usar la técnica de unpacking en los bucles"""

t = ("cereza", "roja"), ("kiwi", "amarillo"), ("pera", "verde"), ("naranja", "naranja")

for fruit, color in t:
  if fruit == "kiwi":
    print("El color del", fruit, "es", color)
  else:
    print("La {} es {}".format(fruit, color))

"""## Tuplas y el resto de estructuras de datos

Una tupla puede contener listas, diccionarios, conjuntos y tuplas
"""

t = [4, 5, 6], {"vowels": ("a", "e", "i", "o", "u")}, {1, 2, 3}, ("x", "y")
type(t)

"""Asimismo,

- las listas pueden contener diccionarios, conjuntos, tuplas y otras listas
- los diccionarios pueden contener listas, conjuntos, tuplas y otros diccionarios
- los conjuntos no pueden contener ni listas, ni diccionarios, ni tuplas, ni siquiera otros conjuntos
"""

l = [{"vowels": ("a", "e", "i", "o", "u")}, {1, 2, 3}, ("x", "y"), [4, 5, 6]]
type(l)

dicc = {"list": [4, 5, 6], "set": {1, 2, 3}, "tuple": ("x", "y"), "dict": {"vowels": ("a", "e", "i", "o", "u")}}
type(dicc)

set1 = {[4, 5, 6], {"vowels": ("a", "e", "i", "o", "u")}, ("x", "y"), {1, 2, 3}}

"""Dado cualquier objeto iterable en `Python`, lo podemos convertir a tupla con la función `tuple()`"""

print(tuple(l)) # A partir de una lista
print(type(tuple(l)))

print(tuple(dicc)) # A partir de un diccionario solo se guardan las claves en la tupla
print(type(tuple(dicc)))

print(tuple({1, 2, 3, 4, 5})) # A partir de un conjunto
print(type(tuple({1, 2, 3, 4, 5})))

"""## La función `zip()`

La función `zip()` sirve para juntar listas en tuplas
"""

objects = ["libreta", "pluma", "portaminas", "pack_minas"]
price = [5.00, 3.30, 1.29, 0.50]
items = zip(objects, price)
print(items)

"""Podemos convertir el resultado de una función `zip()` a una lista"""

items = zip(objects, price)
list(items)

"""Podemos convertir el resultado de una función `zip()` a un diccionario"""

items = zip(objects, price)
dict(items)

"""**¡Cuidado!** Hay que crear de nuevo el objeto `zip()`, pues el resultado de esta función es un iterador y, una vez ha sido convertido a lista, diccionario o tupla, se considera una iteración completa y no será capaz de generar más valores.

Podemos convertir el resultado de una función `zip()` a una tupla:
"""

items = zip(objects, price)
tuple(items)

for obj, pr in zip(objects, price):
    print("El objeto {} cuesta {} €.".format(obj, pr))

