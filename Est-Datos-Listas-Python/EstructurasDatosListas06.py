# -*- coding: utf-8 -*-
"""Tema06.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1kqmy1dUzM9dyss4x-YR_kVuXZ7ynhAdP

# Estructuras de datos: Listas

## Lista

La primera estructura de datos que veremos son las **listas**. Éstas son un conjunto de elementos ordenados separados por comas y escritos entre claudators, `[]`.

Las listas son:
- hetereogéneas: los elementos pueden ser de distinto tipo en una misma lista
- mutables: los elementos pueden ser modificados

Un ejemplo de lista sería
"""

l = ["Juan", 31, 172.32, True]
print(l)

type(l)

"""### Tamaño de una lista

Para saber la longitud o el tamaño de una lista, podemos hacer uso de la función `len()`
"""

l = [1, 2, 3, 4, 5, 6, 7, 8, 9]
len(l)

l = ["Zoe", "Pablo", "Miguel", "Silvia"]
len(l)

"""### Elementos de una lista

Cada elemento en la lista tiene su propio índice
"""

names = ["Maria", "Juan", "Claudia", "Jorge", "Avelina"]

"""A `María` le corresponde el índice 0; a `Juan`, el 1; a `Claudia` el 2; a `Jorge`, el 3; y a `Avelina`, el 4.

**¡Cuidado!** En `Python`, los índices siempre empiezan en 0. De este modo, al primer elemento le corresponde el índice 0; al segundo, el índice 1; y al $n$-ésimo, le corresponde el índice $n−1$.

Dada una lista, podemos acceder a sus elementos utilizando la sintaxis `[]`.
"""

print(names[0])

print(names[3])

"""**¡Cuidado!** Si dada una lista llamamos a un elemento cuyo índice no existe para dicha lista, `Python` automáticamente nos devolverá error.

Podemos acceder a los últimos elementos de la lista haciendo uso de índices negativos.
"""

print(names[-1]) # Último elemento

print(names[-3]) # Tercer elemento empezando por el final

"""Si en vez de querer acceder a los elementos uno por uno estamos interesados en acceder a avarios elementos a la vez, podemos hacer uso de la función `:`"""

print(names[2:4])

print(names[:3])

print(names[3:])

"""**Observación.** En cuanto a la función `:`

- El índice indicado a la derecha de los `:` nunca es incluido
- Si no indicamos elemento a la izquierda de los `:`, por defecto `Python` interpreta que se trata del 0
- Si no indicamos elemento a la derecha, por defecto `Python`interpreta que debe mostrar los elemetos desde el índice indicado a la izquierda hasta el último.

Además de acceder, podemos modificar los elementos de una lista
"""

names[0] = "Marina"
names[3] = "Jaime"
names

"""Podemos añadir nuevos elementos a una lista con el método `.append()`"""

names = ["María", "Cristina", "Juana"]
print(names)

names.append("Andrea")
print(names)
names.append("Ana")
print(names)

"""**Observación.** Los elementos añadidos con el método `.append()`, se incluyen al final.

Si quisiéramos añadir un nuevo elemento a una lista, pero no lo quisiéramos al final, sino en una posición específica, entonces utilizaremos el método `.insert()` al que primero le indicamos el índice donde queremos posicionar el nuevo elemento y, en segundo lugar, indicamos dicho nuevo elemento.
"""

names = ["Mario", "Cristian", "Juan"]
print(names)

names.insert(1, "Andrés")
print(names)
names.insert(3, "Miguel")
print(names)

"""**Observación.** Cuando le indicamos que queremos el elemento `Andrés` en el índice 1, el que antes ocupaba dicho índice, `Cristian`, pasa a ocupar el siguiente, 2, y así con el resto de elementos que van a continuación.

## Bucles con listas

Si quisiéramos imprimir por pantalla todos los elementos de una lista, lo podríamos hacer mediante los índices
"""

for i in range(len(names)):
  print(names[i])

"""o mucho más fácilmente iterando la lista con un `for` con la siguiente sintaxis:"""

for name in names:
  print(name)

"""## Concatenación de listas

Dadas dos o más listas, podemos concatenarlas haciendo uso de la función `+`
"""

l1 = [True, 21, "Marta"]
l2 = [22.5, False, 22, "Rafa"]
print(l1 + l2)

"""## Repetición de listas

Podemos repetir una misma lista tantas veces como queramos con la función `*`
"""

abc = ["A", "B", "C"]
print(abc * 5)

"""## Lista vacía"""

empty_list = []
print(len(empty_list))

"""## Más métodos de listas

El método `.count()` recibe un elemento como argumento y cuenta la cantidad de veces que aparece en la lista
"""

numbers = [0, 1, 1, 2, 2, 2, 3, 3, 3, 3]

counted = []
for element in numbers:
  if element not in counted:
    counted.append(element)
    print("El elemento {} aparece {} veces".format(element, numbers.count(element)))

"""El método `.extend()` extiende la lista agregando al final el iterable indicado por parámetro."""

numbers = [1, 2, 3, 4, 5]
print(numbers)
numbers.extend([6])
print(numbers)
numbers.extend([7, 8])
print(numbers)
numbers.extend(range(9, 16))
print(numbers)

"""**Observación.** Un iterable es un objeto de `Python` capaz de devolver sus elementos uno por uno, permitiendo ser iterado en un bucle for. De momento solo conocemos las listas y el resultado de `range()`, pero en secciones futuras veremos los diccionarios, las tuplas y los conjuntos, que también son objetos iterables.

El método `index()` recibe un elemento como argumento y devuelve el índice de la primera aparición en la lista.
"""

numbers = [0, 1, 1, 2, 2, 2, 3, 4, 3, 4]
print(numbers.index(2))
print(numbers.index(4))

"""El método `.pop()` devuelve el último elemento de la lista y lo borra de la misma."""

print(numbers)
for i in range(5):
    print(numbers.pop())
    print(numbers)

"""El método `.remove()` recibe como argumento un elemento y borra su primera aparición de la lista."""

numbers = [0, 1, 2, 4, 3, 4, 5, 6, 7]
numbers.remove(4)
print(numbers)

"""El método `.reverse()` devuelve la lista en orden inverso."""

numbers = [1, -1, 2, -2, 3, -3]
numbers.reverse()
print(numbers)

"""El método `.sort()` devuelve la lista en orden."""

numbers = [1, 3, 5, 2, 4]
numbers.sort()
print(numbers)

"""Si quisiésemos ordenar los elementos en orden decreciente, podríamos hacer uso del parámetro `reverse` del método `.sort()`:"""

numbers = [1, 3, 5, 2, 4]
numbers.sort(reverse = True)
print(numbers)

"""**Observación.**  De momento solo conocemos las listas y el resultado de `range()`, pero en secciones futuras veremos los diccionarios, las tuplas y los conjuntos, que también son objetos iterables.

## Conversión a listas

Para convertir un objeto iterable de `Python` a lista, hay que usar la función `list()`
"""

print(range(0, 100, 10))

print(type(range(0, 100, 10)))

print(list(range(0, 100, 10)))

print(type(list(range(0, 100, 10))))

"""## Listas anidadas

Las listas anidadas son listas dentro de listas. Es decir, las listas no solo pueden contener números, strings o datos booleanos, sino que también pueden contener otras listas.

---

#### Ejemplo 1

A continuación mostramos una lista anidada, pues consta de 3 elementos:

- 1 lista de 3 strings
- 1 lista heterogénea de 3 elementos que a su vez contiene una lista con 5 números
- 1 número
"""

l = [["María", "Santos", "Fernández"],
     ["Juan", [1, 2, 3, 4, 5], 32],
     2]
print(l)

"""Para acceder a un elemento, necesitamos indicar su índice. Si un elemento está en una lista dentro de una lista dentro de una lista, en primer lugar indicamos el índice de la lista exterior dentro de `[]`; después, el índice de la siguiente lista más exterior también entre `[]`; y por último, el índice de la lista más interna, claramente también entre `[]`.

Accedamos al string `Fernández`y luego al número `5`.
"""

print(l[0][2]) # Fernández
print(l[1][1][4]) # 5

"""---

### Matrices

Hay un tipo muy utilizado de listas anidadas. Se caracteriza por ser una lista de $m$ listas, donde cada una de las listas tiene el mismo número de elementos, $n$. A este tipo de listas se les conoce como matrices.
"""

matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]

"""En matemáticas, las matrices se definen del siguiente modo.

**Matriz.** Una matriz de dimensiones $m\times n$ es una tabla formada por elementos dispuestos en $m$ filas y $n$ columnas de la forma

$$A = \begin{pmatrix}
a_{11} & a_{12} & \cdots & a_{1n}\\
a_{21} & a_{22} & \cdots & a_{2n}\\
\vdots & \vdots & \ddots & \vdots\\
a_{m1} & a_{m2} & \cdots & a_{mn}\end{pmatrix}$$

Los elementos de la matriz se representan con doble subíndice, $a_{ij}$, donde el primero indica la fila a la que pertenece y, el segundo, la columna.

Entonces, la matriz que hemos definido anteriormente
"""

matrix

"""escrita en forma de tabla sería: `matrix` $= \displaystyle\begin{pmatrix} 1 & 2 & 3\\ 4 & 5 & 6\\ 7 & 8 & 9\end{pmatrix}$

Para acceder a los elementos de una matriz en `Python`, utilizamos la sintaxis `[][]`, donde primero indicamos la fila y, a continuación, la columna
"""

matrix[0][2]

matrix[1][1]

matrix[2][0]

"""Podemos mostrar una matriz de `Python` en forma de tabla con un bucle `for`, del siguiente modo"""

for row in matrix: # Accedemos a las filas de la matrix
  print(row)

"""Si lo que queremos es mostrar todos los elementos de la matriz en columna, podemos utilizar dos bucles `for` anidados del siguiente modo:"""

for row in matrix: # Accedemos a las filas
  for element in row: # Accedemos a los elementos de las filas
    print(element)

"""Si lo que queremos es mostrar la matriz en forma de tabla, sin comas ni claudators por en medio, lo podemos hacer de dos formas:

- Haciendo uso de las dimensiones de la matriz y, por tanto, de la función `range()`
- Sin hacer uso de las dimensiones

La primera forma sería:
"""

# m es el número de filas y n, el de columnas
m = len(matrix)
n = len(matrix[0])

for i in range(m):
  for j in range(n):
    print(matrix[i][j], end = " ")
  print("")

"""**Observación.**

1. Como todas las filas tienen el mismo número de elementos, nos da igual si calculamos $n$ con la primera fila o con cualquier otra.
2. Hemos hecho uso del parámetro `end` de la función `print()` para indicar si, en vez de un salto de línea como ocurre por defecto, queremos que suceda otra cosa inmediatamente después de ejecutar la función `print()`. En este caso, hemos indicado que queremos un espacio en blanco.

Y la segunda forma, es la siguiente:
"""

for row in matrix:
  for element in row:
    print(element, end = " ")
  print("")

"""#### Suma de matrices

Para poder sumar dos matrices, necesitamos que tengan la misma dimensión. Entonces, dadas $A$ y $B$ dos matrices con dimensión $m\times n$, su suma será una matriz de dimensión $m\times n$ y sus elementos se obtienen del siguiente modo:

$$\begin{array}{lll}A + B &=& (a_{ij})_{m\times n} + (b_{ij})_{m\times n} = (a_{ij} + b_{ij})_{m\times n}\\
&=&\begin{pmatrix}
a_{11} & a_{12} & \cdots & a_{1n}\\
a_{21} & a_{22} & \cdots & a_{2n}\\
\vdots & \vdots & \ddots & \vdots\\
a_{m1} & a_{m2} & \cdots & a_{mn}\\
\end{pmatrix} + \begin{pmatrix}
b_{11} &b_{12} & \cdots &b_{1n}\\
b_{21} &b_{22} & \cdots &b_{2n}\\
\vdots & \vdots & \ddots & \vdots\\
b_{m1} &b_{m2} & \cdots & b_{mn}\\
\end{pmatrix} = \begin{pmatrix}
a_{11} + b_{11} & a_{12} + b_{12} & \cdots & a_{1n} + b_{1n}\\
a_{21} + b_{21} & a_{22} + b_{22} & \cdots & a_{2n} + b_{2n}\\
\vdots & \vdots & \ddots & \vdots\\
a_{m1} + b_{m1} & a_{m2} + b_{m2} & \cdots & a_{mn} + b_{mn}\\
\end{pmatrix}
\end{array}$$

Dadas dos matrices con la misma dimensión, las podemos usar haciendo uso de bucles `for` anidados.
"""

A = [[1, 0, -3], [2, 0, 1], [-1, -1, 0]]
B = [[-1, -2, 0], [-2, 3, 0], [0, 0, -3]]

m = len(A)
n = len(A[0])

if len(A) == len(B) and len(A[0]) == len(B[0]):
  C = []

  for i in range(m):
    C.append([])
    for j in range(n):
      C[i].append(A[i][j] + B[i][j])

  print(C)

else:
  print("No se puede realizar la suma, pues las dimensiones de las matrices no coinciden.")

"""El resultado de sumar las matrices $A$ y $B$ ha sido

$$\begin{pmatrix}
1 & 0 & -3\\
2 & 0 & 1\\
-1 & -1 & 0\end{pmatrix} + \begin{pmatrix}
-1 & -2 & 0\\
-2 & -3 & 0\\
0 & 0 & -3\end{pmatrix} =
\begin{pmatrix}
0 & -2 & -3\\
0 & -3 & 1\\
-1 & -1 & -3\end{pmatrix}$$
"""

for row in C:
  print(row)

"""**Observación.** Hemos puesto un `if` que, suponiendo que tanto $A$ como $B$ son matrices, comprueba si sus dimensiones coinciden. De ser cierto, procede a hacer la suma. De lo contrario, devuelve un mensaje indicando que la suma no puede llevarse a cabo.

#### Producto de matrices

Para poder multiplicar matrices, necesitamos que la matriz de la izquierda tenga el mismo número de columnas que número de filas tiene la matriz de la derecha. Entonces, dadas las matrices $A$ y $B$ de dimensiones $m\times n$ y $n\times p$ respectivamente, su producto será una matriz de dimensión $m\times p$ y se obtiene del siguiente modo:

$$\begin{array}{lll}A\cdot B &=& (a_{ij})_{m\times n}\cdot (b_{ij})_{n\times p} = \left(\sum_{k = 1}^n a_{ik}\cdot b_{kj}\right)_{m\times p}\\
&=& \begin{pmatrix}
a_{11} & a_{12} & \cdots & a_{1n}\\
a_{21} & a_{22} & \cdots & a_{2n}\\
\vdots & \vdots & \ddots & \vdots\\
a_{m1} & a_{m2} & \cdots & a_{mn}\\
\end{pmatrix} \cdot \begin{pmatrix}
b_{11} &b_{12} & \cdots &b_{1p}\\
b_{21} &b_{22} & \cdots &b_{2p}\\
\vdots & \vdots & \ddots & \vdots\\
b_{n1} &b_{n2} & \cdots & b_{np}\\
\end{pmatrix} = \begin{pmatrix}
a_{11}\cdot b_{11} + a_{12} \cdot b_{21} + \cdots + a_{1n}\cdot b_{n1} & \sum_{k = 1}^n a_{1k}\cdot b_{k2} & \cdots & \sum_{k = 1}^n a_{1k}\cdot b_{kp}\\
a_{21}\cdot b_{11} + a_{22} \cdot b_{21} + \cdots + a_{2n}\cdot b_{n1} & \sum_{k = 1}^n a_{2k}\cdot b_{k2} & \cdots & \sum_{k = 1}^n a_{2k}\cdot b_{kp}\\
\vdots & \vdots & \ddots & \vdots\\
a_{m1}\cdot b_{11} + a_{m2} \cdot b_{21} + \cdots + a_{mn}\cdot b_{n1} & \sum_{k = 1}^n a_{mk}\cdot b_{k2} & \cdots & \sum_{k = 1}^n a_{mk}\cdot b_{kp}
\end{pmatrix}\end{array}$$

Dadas dos matrices, la primera con el mismo número de columnas que filas tiene la segunda, podemos multiplicarlas del siguiente modo:
"""

A = [[1, 0, -3, 2], [2, 0, 1, 1], [-1, 0, -1, 0]]
B = [[-1, -2, 0], [-2, 3, 0], [0, 0, -3], [1, 1, -1]]

m, n, p = len(A), len(B), len(B[0])

C = []

for i in range(m):
  C.append([])
  for j in range(p):
    elemento = 0
    for k in range(n):
      elemento = elemento + A[i][k] * B[k][j]
    C[i].append(elemento)

"""El resultado de multiplicar las matrices $A$ y $B$ ha sido

$$\begin{array}{lll} A\cdot B &=&
\begin{pmatrix}
1 & 0 & -3 & 2\\
2 & 0 & 1 & 1\\
-1 & 0 & -1 & 0
\end{pmatrix}\cdot\begin{pmatrix}
-1 & -2 & 0\\
-2 & 3 & 0\\
0 & 0 & -3\\
1 & 1 & -1
\end{pmatrix}\\ &=& \begin{pmatrix}
1\cdot (-1) + 0\cdot (-2) -3\cdot 0 + 2\cdot 1 & 1\cdot (-2) + 0\cdot 3 -3\cdot 0 + 2\cdot 1 & 1\cdot 0 + 0\cdot 0 -3\cdot (-3) + 2\cdot (-1)\\
2\cdot (-1) + 0\cdot (-2) + 1\cdot 0 + 1\cdot 1  & 2\cdot (-2) + 0\cdot 3 + 1\cdot 0 + 1\cdot 1 & 2\cdot 0 + 0\cdot 0 + 1\cdot (-3) + 1\cdot (-1)\\
-1\cdot (-1) + 0\cdot (-2) -1\cdot 0 + 0\cdot 1  & -1\cdot (-2) + 0\cdot 3 -1\cdot 0 + 0\cdot 1 & -1\cdot 0 + 0\cdot 0 -1\cdot (-3) + 0\cdot (-1)
\end{pmatrix}\\ &=& \begin{pmatrix}
1 & 0 & 7\\
-1 & -3 & -4\\
1 & 2 & 3
\end{pmatrix}
\end{array}$$
"""

for row in C:
  print(row)

"""#### Matrices con `numpy`

Existe una forma más sencilla de trabajar con matricdes y es gracias a la librería `numpy`. Para importarla, simplemente hay que ejecutar la siguiente línea de código.
"""

import numpy as np

"""Para crear una matriz vacía, usamos el método `.empty()`, al que le indicamos por parámetro las dimensiones"""

A = np.empty((2, 3)) # 2 filas y 3 columnas
print(A)

"""Para crear una matriz vacía con las mismas dimensiones de otra matriz definida anteriormente, usamos el método `.empty_like()`, al que le indicamos por parámetro la matriz existente"""

B = np.empty_like(A) # Tendrá 2 filas y 3 columnas
print(B)

"""Para crear una matriz nula, usamos el método `.zeros()`, al que le indicamos por parámetro las dimensiones"""

C = np.zeros((3, 5)) # Matriz nula de dimensiones 3 x 5
print(C)

"""Para crear una matriz de ceros con las mismas dimensiones de otra matriz definida anteriormente, usamos el método `.zeros_like()`, al que le indicamos por parámetro la matriz existente"""

D = np.zeros_like(A) # Tendrá 2 filas y 3 columnas y todos sus elementos valdrán 0
print(D)

"""Para crear una matriz de unos, usamos el método `.ones()`, al que le indicamos por parámetro las dimensiones"""

E = np.ones((1, 4)) # Matriz de unos de dimensiones 1 x 4
print(E)

"""Para crear una matriz de unos con las mismas dimensiones de otra matriz definida anteriormente, usamos el método `.ones_like()`, al que le indicamos por parámetro la matriz existente"""

F = np.ones_like(C) # Tendrá 3 filas y 5 columnas y todos sus elementos valdrán 1
print(F)

"""Podemos crear matrices de numpy a partir de listas con el método `.matrix()`"""

M = np.matrix([[1, 0, -3, 2], [2, 0, 1, 1], [-1, 0, -1, 0]])
print(M)

"""Para saber las dimensiones de una matriz, podemos utilizar el método `.shape`

"""

M.shape

"""Ahora es más sencillo sumar matrices, pues solamente necesitamos la función `+`"""

A = np.matrix([[1, 0, -3], [2, 0, 1], [-1, -1, 0]])
B = np.matrix([[-1, -2, 0], [-2, 3, 0], [0, 0, -3]])
matrixSum = A + B
matrixSum

"""También es más sencillo hacer el producto matricial $A\cdot B$ con el método `.dot()`"""

A = np.matrix([[1, 0, -3, 2], [2, 0, 1, 1], [-1, 0, -1, 0]])
B = np.matrix([[-1, -2, 0], [-2, 3, 0], [0, 0, -3], [1, 1, -1]])

matrixProd = A.dot(B)
matrixProd

"""Gracias a `numpy`, también es mucho más sencillo mostrar una matriz en forma de tabla, pues nos basta con hacer uso de la función `print()`:"""

print(matrixSum)
print(matrixProd)

"""En futuras secciones hablaremos más detenidamente de todo lo que es capaz la librería `numpy`."""