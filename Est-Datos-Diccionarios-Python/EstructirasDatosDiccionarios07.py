# -*- coding: utf-8 -*-
"""Tema07.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1RD4DimyI8qm3ZXckQate3UrcdCHYWxIK

# Estructuras de datos: Diccionarios

## Diccionario

La segunda estructura de datos que veremos son los **diccionarios**. Éstos son un conjunto de elementos no ordenados escritos entre llaves, `{}`, que constan de claves y valores.

Cada conjunto `clave: valor` es separado por comas. Las claves funcionan como identificadores y preceden a `:`. A continuación van los valores, que son elementos (numéricos, booleanos, strings, listas, diccionarios...) asociados a esa clave.

Los diccionarios, al igual que las listas, son:
- hetereogéneos: los elementos pueden ser de distinto tipo en un mismo diccionario
- mutables: los elementos pueden ser modificados

Un ejemplo de diccionario sería
"""

dicc = {"Jose": 32, "Marina": 21}
print(dicc)

"""**¡Cuidado!** En `Python`, las claves de un diccionario deben ser únicas. Esto es, no puede haber dos claves que sean exactamente iguales. Si se da que hay dos claves iguales, entonces `Python` se queda con el último valor asociado a dicha clave."""

dicc = {"Jose": 32,
        "Marina": 21,
        "Jose": 23}
print(dicc)

"""**Observación.** Al decir que los diccionarios no tienen orden, lo que ocurre es que `Python` no mantendrá el que hemos introducido, tal y como hacía con las listas, sino que reordenará todos los elementos por orden primero numérico (yendo antes los positivos que los negativos) y luego alfabético de las claves. Esto no ocurre si usamos la función `print()`."""

l = ["Jose", "Marina", "Elena"]
l

dicc = {"Jose": 32,
        "Marina": 21,
        "Elena": 10}
dicc

print(dicc)

dicc = {"Alba": 2, 7: "a", -5: "b", "Javi": 28}
dicc

print(dicc)

"""### Elementos de un diccionario

Anteriormente se ha comentado que los diccionarios no tienen orden. De modo que a sus elementos no se accede por posición, sino que debemos hacerlo mediante sus claves.

La sintaxis es `diccionario[clave]`
"""

dicc = {
    "names": ["Ana", "Borja", "Carmen"],
    "ages" : [31, 25, 16]
    }
dicc["names"]

dicc["ages"]

"""Poemos acceder a todas las claves de un diccionario con el método `.keys()`"""

dicc.keys()

"""También podemos acceder a todos los valores de un diccionario con el método `.values()`"""

dicc.values()

"""Al ser una estructura mutable, podemos modificar los valores de los diccionarios"""

dicc = {"names": ["Ana", "Borja", "Carmen"],
        "ages": [31, 25, 16]}
dicc["names"] = ["David", "Emilia", "Fernando"]
dicc["ages"][2] = 36
print(dicc)

"""También podríamos partir de un diccionario vacío e ir introduciéndole valores asociados a claves. De hecho, podemos hasta pedirle a un usuario que introduzca él los datos."""

ficha_usuario = {}
print("Introduzca su nombre:")
ficha_usuario["name"] = str(input())
print("Introduzca su edad:")
ficha_usuario["age"] = int(input())
print("¿Es usted una mujer? Responda f en caso afirmativo y m en caso contrario")
ficha_usuario["gender"] = "female" if input() == "f" else "male"
print(ficha_usuario)

"""**Observación.** La función `str()` impone que lo que sea que introduzcamos sea un dato de tipo `string`. Funciona exactamente del mismo modo que lo hacen las funciones `int()` y `float()` introducidas y utilizadas en temas anteriores."""

value = 0
type(value)

value_string = str(0)
type(value_string)

"""### Tamaño de un diccionario

Para saber cuántos elementos contiene un diccionario, podemos usar la función `len()`del siguiente modo:
"""

dicc = {"fruit": ["Manzana", "Pera", "Naranja"],
        "price": [2, 1.5, 1],
        "color": ["roja", "verde", "naranja"]}

print(len(dicc))

"""## Bucles y diccionarios

Para recorrer todo el diccionario, podemos hacer uso de un bucle `for`, pues el diccionario es una estructura iterable:
"""

dicc = {"username": "msf",
        "name": "María",
        "age": 22,
        "city": "Palma de Mallorca"}

for key in dicc:
  print(key, ":", dicc[key])

"""Otra forma de recorrer el diccionario sería obteniendo una lista de tuplas de la forma `(clave, valor)` para cada elemento de un diccionario, que construimos con el método `.items()`. Al ser una lista, sabemos que es iterable y podemos mostrar todas sus entradas haciendo uso de un bucle `for`."""

dicc.items()

for item in dicc.items():
  print(item)

"""**Observación.** Veremos las tuplas, que son otro tipo de Estructuras de datos en `Python`, en futuras secciones.

Para tener clave y valor por separado, podemos hacerlo del siguiente modo:
"""

for key, value in dicc.items():
  print(key, ":", value)

"""## Diccionarios y listas

Como se ha mencionado antes, un diccionario puede contener listas u otros diccionarios. Por su parte, una lista también puede contener diccionarios:
"""

dicc_1 = {"name": "Elisa",
        "age": 30,
        "gender": "female",
        "ID": [4, 4, 2, 1, 5, 6, 7, 2, "L"],
        "user&password": {
            "username": "eli88",
            "password": "1234catsareawesome"
            }
          }
dicc_2 = {"name": "Henry",
        "age": 27,
        "gender": "male",
        "ID": [1, 1, 0, 1, 3, 8, 6, 9, "A"],
        "user&password": {
            "username": "superhenry",
            "password": "1432superme"
            }
          }
lista = [dicc_1, dicc_2]

for item in lista:
  print(item)

"""## Más métodos de diccionarios

El método `.clear()` elimina todos los elementos del diccionario dejándolo vacío.

"""

dicc = {"a": 4, "b": 3, "c": 2, "d": 1}
print(dicc)

dicc.clear()
print(dicc)

"""El método `.copy()` devuelve una copia del diccionario original."""

dicc = {"a": 4, "b": 3, "c": 2, "d": 1}
dicc_copy = dicc.copy()

print(dicc_copy)

"""El método `.fromkeys()` recibe como parámetros un iterable y un valor y devuelve un diccionario que contiene como claves los elementos del iterable con el mismo valor ingresado."""

dicc = dict.fromkeys(["a", "b", "c", "d", "e"], [1, 2, 3, 4])
print(dicc)

"""**Observación.** Si el parámetro valor se deja en blanco, el método devolverá un diccionario con el valor `None` para todas las claves."""

dicc = dict.fromkeys(["a", "b", "c", "d", "e"])
print(dicc)

"""El método `.get()` recibe como parámetro una clave y devuelve el valor de dicha clave."""

dicc = {"a": 1, "e": 2, "i": 3, "o": 4, "u": 5}
print(dicc.get("a"))

"""**Observación.** Si la clave no se encuentra en el diccionario, el método devuelve un objeto `None`."""

dicc = {"a": 1, "e": 2, "i": 3, "o": 4, "u": 5}
print(dicc.get("b"))

"""El método `.pop()` recibe como parámetro una clave, la elimina y devuelve su valor."""

dicc = {"a": 1, "e": 2, "i": 3, "o": 4, "u": 5}
print(dicc)

print(dicc.pop("i"))
print(dicc)

"""**Observación.** Si la clave indicada por parámetro no se encuentra en el diccionario, el método devuelve error.

El método `.setdefault()` puede funcionar de dos formas:

- Como el método `.get()`
- Para agregar un nuevo elemento al diccionario.
"""

# Como .get()
dicc = {"a": 1, "e": 2, "i": 3, "o": 4, "u": 5}
print(dicc.setdefault("i"))

# Para agregar nuevo elemento
print(dicc.setdefault("ü", 6))
print(dicc)

"""El método `.update()` recibe como parámetro otro diccionario. En caso de tener claves iguales, actualiza el valor de la clave repetida. En caso de no haber claves iguales, el par `clave: valor` es agregado al diccionario al que es aplicado el método."""

dicc1 = {"a": 1, "e": 2, "i": 3, "o": 4, "u": 5}
dicc2 = {"a": 1, "b": 2, "c": 3, "d": 4, "e": 5}
dicc1.update(dicc2)

print(dicc1)

"""## Construyendo diccionarios con dict()

Para convertir un objeto iterable de `Python` a diccionario, hay que usar la función `dict()`
"""

l = [["x", 1], ["y", 2]]
dict(l)

"""Aunque la función `dict()` también sirve para definir diccionarios directamente:"""

dicc1 = dict(x = 0, y = 1, z = -1)
print(dicc1)

dicc2 = dict({"x": 0, "y": 1, "z": -1})
print(dicc2)

dicc3 = dict({"x": 0}, y = 1, z = -1)
print(dicc3)